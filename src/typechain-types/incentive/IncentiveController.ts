/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IncentiveControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CALCULATE_PRECISION"
      | "admins"
      | "balanceOf"
      | "claimReward"
      | "emergencyWithdraw"
      | "funder"
      | "globalIndex"
      | "governance"
      | "initialize"
      | "lastUpdated"
      | "lendingIndexAtTimeStart"
      | "lendingPool"
      | "newStakers"
      | "pause"
      | "paused"
      | "poolTrigger"
      | "ratePerSecond"
      | "rps"
      | "setAdmin"
      | "setData"
      | "setGovernance"
      | "stakeEnd"
      | "stakeStart"
      | "stakers"
      | "tokenRewards"
      | "tokenStaked"
      | "totalStaker"
      | "unpause"
      | "updateFunder"
      | "updateGlobalIndex"
      | "updateLendingIndex"
      | "updateLendingPool"
      | "updateReward"
      | "updateRps"
      | "updateStakeTime"
      | "viewReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "Paused"
      | "Staked"
      | "Unpaused"
      | "Unstaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CALCULATE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "funder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "globalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingIndexAtTimeStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newStakers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolTrigger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ratePerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stakeEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFunder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLendingIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLendingPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewReward",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CALCULATE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingIndexAtTimeStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newStakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFunder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLendingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewReward", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IncentiveController extends BaseContract {
  connect(runner?: ContractRunner | null): IncentiveController;
  waitForDeployment(): Promise<this>;

  interface: IncentiveControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CALCULATE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  balanceOf: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  claimReward: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  funder: TypedContractMethod<[], [string], "view">;

  globalIndex: TypedContractMethod<[], [bigint], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [governance_: AddressLike],
    [void],
    "nonpayable"
  >;

  lastUpdated: TypedContractMethod<[], [bigint], "view">;

  lendingIndexAtTimeStart: TypedContractMethod<[], [bigint], "view">;

  lendingPool: TypedContractMethod<[], [string], "view">;

  newStakers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  poolTrigger: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  ratePerSecond: TypedContractMethod<[], [bigint], "view">;

  rps: TypedContractMethod<[], [bigint], "view">;

  setAdmin: TypedContractMethod<
    [admin: AddressLike, isAdmin: boolean],
    [void],
    "nonpayable"
  >;

  setData: TypedContractMethod<
    [
      _funder: AddressLike,
      _lendingPool: AddressLike,
      _lendingIndex: BigNumberish,
      _tokenRewards: AddressLike,
      _tokenStaked: AddressLike,
      _rps: BigNumberish,
      _stakeStart: BigNumberish,
      _stakeEnd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setGovernance: TypedContractMethod<
    [governance_: AddressLike],
    [void],
    "nonpayable"
  >;

  stakeEnd: TypedContractMethod<[], [bigint], "view">;

  stakeStart: TypedContractMethod<[], [bigint], "view">;

  stakers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        index: bigint;
        pendingReward: bigint;
        lastTimeUpdated: bigint;
        lastLendingIndex: bigint;
      }
    ],
    "view"
  >;

  tokenRewards: TypedContractMethod<[], [string], "view">;

  tokenStaked: TypedContractMethod<[], [string], "view">;

  totalStaker: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateFunder: TypedContractMethod<
    [_funder: AddressLike],
    [void],
    "nonpayable"
  >;

  updateGlobalIndex: TypedContractMethod<[], [void], "nonpayable">;

  updateLendingIndex: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateLendingPool: TypedContractMethod<
    [_lendingPool: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReward: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRps: TypedContractMethod<[_rps: BigNumberish], [void], "nonpayable">;

  updateStakeTime: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;

  viewReward: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CALCULATE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "funder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[governance_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastUpdated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lendingIndexAtTimeStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lendingPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newStakers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "poolTrigger"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ratePerSecond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<
    [admin: AddressLike, isAdmin: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setData"
  ): TypedContractMethod<
    [
      _funder: AddressLike,
      _lendingPool: AddressLike,
      _lendingIndex: BigNumberish,
      _tokenRewards: AddressLike,
      _tokenStaked: AddressLike,
      _rps: BigNumberish,
      _stakeStart: BigNumberish,
      _stakeEnd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernance"
  ): TypedContractMethod<[governance_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        index: bigint;
        pendingReward: bigint;
        lastTimeUpdated: bigint;
        lastLendingIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenRewards"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenStaked"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalStaker"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFunder"
  ): TypedContractMethod<[_funder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGlobalIndex"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLendingIndex"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLendingPool"
  ): TypedContractMethod<[_lendingPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReward"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRps"
  ): TypedContractMethod<[_rps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStakeTime"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "viewReward"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Staked(address)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Unstaked(address,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
  };
}
